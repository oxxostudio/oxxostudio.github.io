<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OXXO.STUDIO</title>
    <link>http://www.oxxostudio.tw</link>
    <description>OXXO.STUDIO 包含了視覺創作、網頁前端程式、UI與UX 三個主要面向，希望能藉由這個小小平台，能夠展示自己的作品與創意，同時也是我自己練習的平台，記錄自己的成長足跡！</description>
    <pubDate>2015-06-30 22:55:00 GMT</pubDate>
    <copyright>OXXO.STUDIO</copyright>
    <Webmaster>oxxo.studio@gmail.com</Webmaster>
    <language>zh-TW</language>
    <image>
      <url>http://www.oxxostudio.tw/img/layout/social.png</url>
      <title>OXXO.STUDIO</title>
      <link>http://www.oxxostudio.tw/</link>
    </image>
    <item>
      <title>HTML5 控制裝置陀螺儀 ( 三軸 )</title>
      <link>http://www.oxxostudio.tw/articles/201506/html5-device-orientation.html</link>
      <pubDate>2015-06-30 22:55:00 GMT</pubDate>
      <description>在行動裝置發達的現在，手機或平板的瀏覽器效能也跟了上來，加上 iOS 與 Android 兩大陣營對於瀏覽器可以控制硬體的權限逐漸鬆手，慢慢的當年 HTML5 裏頭所制定出來，和控制裝置硬體相關的 API 也逐漸可以派上用場。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201506/20150630_1_01b.jpg</url>
        <title>HTML5 控制裝置陀螺儀 ( 三軸 )</title>
        <link>http://www.oxxostudio.tw/articles/201506/html5-device-orientation.html</link>
      </image>
    </item>
    <item>
      <title>玩轉 CSS 3D - 正八面體與正十二面體</title>
      <link>http://www.oxxostudio.tw/articles/201506/css-3d-platonic-solid-2.html</link>
      <pubDate>2015-06-20 21:55:00 GMT</pubDate>
      <description>上一篇介紹了正四面體與正六面體，接著我們要用同樣的方法，來製作正八面體與正十二面體，這兩個正多面體雖然組合的面比較多，不過因為具備了對稱性，所以只需要製作出一半的結構，另外一半再用反轉的方式接在一起即可。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201506/20150620_2_01b.jpg</url>
        <title>玩轉 CSS 3D - 正八面體與正十二面體</title>
        <link>http://www.oxxostudio.tw/articles/201506/css-3d-platonic-solid-2.html</link>
      </image>
    </item>
    <item>
      <title>玩轉 CSS 3D - 正四面體與正六面體</title>
      <link>http://www.oxxostudio.tw/articles/201506/css-3d-platonic-solid-1.html</link>
      <pubDate>2015-06-20 00:55:00 GMT</pubDate>
      <description>理解了 CSS 3D 的箇中原理之後，直接來畫正多面體吧！只要正多面體可以畫出來，基本上在 CSS 3D 的領域裡，大概就沒甚麼難得倒我們了，「正多面體，或稱柏拉圖立體， 指各面都是全等的正多邊形且每一個頂點所接的面數都是一樣的凸多面體。」簡單來說，就是非常對稱的立方體，而且每一個面都是由正多邊形組成，因此在這一篇，將會畫出正四面體、正六面體。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201506/20150620_1_01b.jpg</url>
        <title>玩轉 CSS 3D - 正四面體與正六面體</title>
        <link>http://www.oxxostudio.tw/articles/201506/css-3d-platonic-solid-1.html</link>
      </image>
    </item>
    <item>
      <title>玩轉 CSS 3D - 原理篇</title>
      <link>http://www.oxxostudio.tw/articles/201506/css-3d.html</link>
      <pubDate>2015-06-19 17:25:00 GMT</pubDate>
      <description>CSS 3D 坦白說就是純粹利用計算的方法，藉由瀏覽器的高效能，在 2D 的空間繪製一個 3D 的圖形，就像我們拿張紙，用鉛筆在上頭畫個正立方體之類的，從這篇開始以及再來的一兩篇，將會深入介紹 CSS 3D 的繪圖以及直接做些應用。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201506/20150619_1_01b.jpg</url>
        <title>玩轉 CSS 3D - 原理篇</title>
        <link>http://www.oxxostudio.tw/articles/201506/css-3d.html</link>
      </image>
    </item>
    <item>
      <title>oxxo.studio 一周年生日快樂</title>
      <link>http://www.oxxostudio.tw/articles/201505/oxxostudio.html</link>
      <pubDate>2015-05-01 00:00:00 GMT</pubDate>
      <description>今天是 oxxo.studio 開台一年的日子，雖然說部落格上的文章不是從五月一號開始，但第一個版本是在五月一號上線的，當初其實也用這個部落格作為我自己的生日禮物 ( 我也是五月一號出生ㄎㄎ )。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201505/20150501_01.jpg</url>
        <title>oxxo.studio 一周年生日快樂</title>
        <link>http://www.oxxostudio.tw/articles/201505/oxxostudio.html</link>
      </image>
    </item>
    <item>
      <title>運用 clip-path 的純 CSS 形狀變換</title>
      <link>http://www.oxxostudio.tw/articles/201503/css-clip-path.html</link>
      <pubDate>2015-03-30 23:55:00 GMT</pubDate>
      <description>在單一 div 的正多邊形變換 ( 純 CSS ) 這篇所提到繪製正多邊形的方法，算是純粹利用偽元素來完成，不過坦白說還有另外一種方法，可以將單一 div 做更多形狀的變換，這種方法就是 CSS3 的「clip-path」，這個「clip-path 」看起來有點眼熟，因為它原本就存在於 SVG 裡頭。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150330_1_01b.jpg</url>
        <title>運用 clip-path 的純 CSS 形狀變換</title>
        <link>http://www.oxxostudio.tw/articles/201503/css-clip-path.html</link>
      </image>
    </item>
    <item>
      <title>單一 div 的正多邊形變換 ( 純 CSS )</title>
      <link>http://www.oxxostudio.tw/articles/201503/css-regular-polygon-transform.html</link>
      <pubDate>2015-03-29 22:05:00 GMT</pubDate>
      <description>這篇純粹利用 CSS，讓「單一個」div，從正三角形變換為正八邊形 ( 單一 div 最多只能做到正八邊形 )，最後再搭配動畫的效果，變成正多邊形的變換動畫，也由於正多邊形需要用到不少的三角函數計算，為了方便起見，這裡將正多邊形的邊統一都設為 100px。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150329_1_01b.jpg</url>
        <title>單一 div 的正多邊形變換 ( 純 CSS )</title>
        <link>http://www.oxxostudio.tw/articles/201503/css-regular-polygon-transform.html</link>
      </image>
    </item>
    <item>
      <title>純 CSS Material Design 風格按鈕</title>
      <link>http://www.oxxostudio.tw/articles/201503/css-material-design-icon.html</link>
      <pubDate>2015-03-25 23:45:00 GMT</pubDate>
      <description>當初一看到 Material Design，其實就很想要嘗試做做看 Material Design 的 icon 按鈕，這類型的按鈕往往只利用幾何色塊的變化，就能抓住使用者的眼光，並且從幾何形狀中明白按鈕的含意，這也是 Material Design 非常強調的設計理念和精髓。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150325_1_01.gif</url>
        <title>純 CSS Material Design 風格按鈕</title>
        <link>http://www.oxxostudio.tw/articles/201503/css-material-design-icon.html</link>
      </image>
    </item>
    <item>
      <title>純 CSS 繪製圓餅圖</title>
      <link>http://www.oxxostudio.tw/articles/201503/css-pie-chart.html</link>
      <pubDate>2015-03-24 23:25:00 GMT</pubDate>
      <description>純粹的 CSS 圓餅圖，勢必得用一個以上的 div 來組合產生，那麼，啾竟需要多少個 div 才有辦法做出一個漂亮的圓餅圖呢？目前我的做法「只需要用一個 div 搭配自身兩個偽元素」即可，換句話說，就是用 div 本身作為遮罩，內容的兩個偽元素互相旋轉搭配，就可以做出逼真的圓餅圖。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150324_2_01.gif</url>
        <title>純 CSS 繪製圓餅圖</title>
        <link>http://www.oxxostudio.tw/articles/201503/css-pie-chart.html</link>
      </image>
    </item>
    <item>
      <title>改變 HTML5 range 樣式的兩種方法</title>
      <link>http://www.oxxostudio.tw/articles/201503/html5-input-range-style.html</link>
      <pubDate>2015-03-24 22:25:00 GMT</pubDate>
      <description>今天來探討一下 HTML5 的 range 這個新的 input 類型，不過重點不是在 range 要如何使用，而是在如何去改變 range 的樣式，做出一個漂漂亮亮的滑動桿，這篇會介紹兩種修改 range 樣式的方法，一種是純 CSS，一種是用 jquery 搭配 CSS 來製作。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150324_1_01b.jpg</url>
        <title>改變 HTML5 range 樣式的兩種方法</title>
        <link>http://www.oxxostudio.tw/articles/201503/html5-input-range-style.html</link>
      </image>
    </item>
    <item>
      <title>Gulp 學習 6 - 架設 Markdown 轉 HTML 環境</title>
      <link>http://www.oxxostudio.tw/articles/201503/gulp-6-markdown-to-html.html</link>
      <pubDate>2015-03-13 23:25:00 GMT</pubDate>
      <description>當我發現 Gulp 也有 markdown 轉換的套件之後，就決定可以自己來做一個轉換的環境，如此一來就不用受限於各個編輯器的樣式，也不用受限於 gitbook 只能轉電子書的樣貌，甚至可以搭配之前幾篇介紹過的壓縮打包、html extend...等，做出一個純粹用 markdown 編寫網頁的環境。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150313_1_01b.jpg</url>
        <title>Gulp 學習 6 - 架設 Markdown 轉 HTML 環境</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-6-markdown-to-html.html</link>
      </image>
    </item>
    <item>
      <title>SublimeText - Seti_UI theme</title>
      <link>http://www.oxxostudio.tw/articles/201503/sublimetext-seti-theme.html</link>
      <pubDate>2015-03-10 23:25:00 GMT</pubDate>
      <description>今天來介紹一個非常漂亮的 SublimeText theme：Seti_UI，這大概也是最近身邊的人幾乎每個人都用的樣式，我也是因為看到別人用才下載來用的，沒想到一用之後驚為天人，一定要分享給大家。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150310_1_01b.jpg</url>
        <title>SublimeText - Seti_UI theme</title>
        <link>http://www.oxxostudio.tw/articles/201503/sublimetext-seti-theme.html</link>
      </image>
    </item>
    <item>
      <title>Gulp 學習 5 - 建立 HTML 模板</title>
      <link>http://www.oxxostudio.tw/articles/201503/gulp-5-html-extend.html</link>
      <pubDate>2015-03-09 23:35:00 GMT</pubDate>
      <description>這裡我們要用到的是 gulp-html-extend 這個套件，gulp-html-extend 會把某些特定註解內的內容置換為我們想要的內容，但與 gulp-html-replace 不同的地方，gulp-html-replace 要置換的內容寫在 gulpfile.js 裏頭，而 gulp-html-extend 則是將外部的 HTML 內容嵌入註解的區域。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150309_1_01b.jpg</url>
        <title>Gulp 學習 5 - 建立 HTML 模板</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-5-html-extend.html</link>
      </image>
    </item>
    <item>
      <title>Low-Poly Art</title>
      <link>http://www.oxxostudio.tw/articles/201503/low-poly-art.html</link>
      <pubDate>2015-03-08 23:25:00 GMT</pubDate>
      <description>Low-Poly 這是個之前很紅的向量繪圖風格，不過其實 Low-Poly 存在已久，是由 3D 電腦繪圖發展而來，Low-Poly 是一個利用較少的多邊形，來構成一個 3D 的模型，由於減少了多邊形的數目，相對在做運算也會較為迅速，但缺點就是外觀會呈現一片一片的非擬真狀態。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150308_2_01b.jpg</url>
        <title>Low-Poly Art</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-4-scss-sass.html</link>
      </image>
    </item>
    <item>
      <title>Gulp 學習 4 - 建立 SCSS/SASS 編輯環境</title>
      <link>http://www.oxxostudio.tw/articles/201503/gulp-4-scss-sass.html</link>
      <pubDate>2015-03-08 20:45:00 GMT</pubDate>
      <description>隨著時代的演進，這一兩年來我都已經是用 SCSS 在編寫 CSS，不過 SCSS/SASS 是建構在 Ruby 的環境之下，通常我們要使用，則必須先安裝 Ruby 以及 compass，或也可以購買安裝 Fire.app 代勞，那麼要如何才能用 gulp ，來建立一個自動執行轉換 SCSS 的環境呢？
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150308_1_01b.jpg</url>
        <title>Gulp 學習 4 - 建立 SCSS/SASS 編輯環境</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-4-scss-sass.html</link>
      </image>
    </item>
    <item>
      <title>Gulp 學習 3 - 打包壓縮 HTML</title>
      <link>http://www.oxxostudio.tw/articles/201503/gulp-3-compress-html.html</link>
      <pubDate>2015-03-07 23:55:00 GMT</pubDate>
      <description>例如我們有一個網頁，裡頭載入了三個 CSS 與三個 JS，壓縮之後就會變成只有一個 min.css 和一個 min.js，如此一來原本要載入六個檔案，瞬間就變成了只需要載入兩個檔案而已，也由於由六個 request 降為兩個 request，整個網頁的流暢度也會提升。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150307_1_01b.jpg</url>
        <title>Gulp 學習 3 - 打包壓縮 HTML</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-3-compress-html.html</link>
      </image>
    </item>
    <item>
      <title>Gulp 學習 2 - 打包壓縮 CSS 與 JS</title>
      <link>http://www.oxxostudio.tw/articles/201503/gulp-2-compress-js-css.html</link>
      <pubDate>2015-03-06 23:35:00 GMT</pubDate>
      <description>在上線版本裡頭，就會使用到打包和壓縮過的 JS 或 CSS，這類型的 JS 或 CSS 會在檔案名稱加個「.min」進行區隔，而一個打包壓縮過的 JS 和 CSS，基本上可能是好幾個檔案組合在一起，利用 Gulp 的套件，非常簡單的就可以做到打包壓縮的動作，甚至還可以自動重新命名檔案，一氣呵成。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150306_1_01b.jpg</url>
        <title>Gulp 學習 2 - 打包壓縮 CSS 與 JS</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-2-compress-js-css.html</link>
      </image>
    </item>
    <item>
      <title>Gulp 學習 1 - 安裝與執行</title>
      <link>http://www.oxxostudio.tw/articles/201503/gulp-install-webserver.html</link>
      <pubDate>2015-03-02 23:25:00 GMT</pubDate>
      <description>在二月的時候，我花了不少時間在學習 Gulp 這個任務自動化管理工具，最主要受到了 Gitbook 的啟發，還有洧杰與志誠的推薦，讓我毅然決然地投入了 Gulp 的世界，過去因為工作的需求，接觸過一點點的 Grunt，Gulp 和 Grunt 的初衷相同，都是要把過去需要人工處理的步驟給自動化，如此一來就可以省下不少寶貴的時間。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201503/20150302_1_01b.jpg</url>
        <title>Gulp 學習 1 - 安裝與執行</title>
        <link>http://www.oxxostudio.tw/articles/201503/gulp-install-webserver.html</link>
      </image>
    </item>
    <item>
      <title>用 GitBook 來寫本書吧！</title>
      <link>http://www.oxxostudio.tw/articles/201502/gitbook.html</link>
      <pubDate>2015-02-11 23:55:00 GMT</pubDate>
      <description>自從 2014 年底的台北市市長選舉，柯 P 用了 GitBook 發表了「政策白皮書」之後，GitBook 這個以 GitHub 為基底的電子書瞬間爆紅，也因為政策白皮書瞬間流量爆炸，讓 GitBook 這個外國團隊還發公開信給柯 P 呀！
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201502/20150211_1_01b.jpg</url>
        <title>用 GitBook 來寫本書吧！</title>
        <link>http://www.oxxostudio.tw/articles/201502/gitbook.html</link>
      </image>
    </item>
    <item>
      <title>有趣的 CSS 彈跳動畫</title>
      <link>http://www.oxxostudio.tw/articles/201502/css-bounce.html</link>
      <pubDate>2015-02-09 23:45:00 GMT</pubDate>
      <description>這是只用了一個 div 來做的小動畫，純粹利用 CSS3 的 animation 來完成，就像是一個正方形在地上彈跳，碰到地面的時候尖角還會壓縮變圓，陰影的部分也會隨著正方形升高而縮小，至於到底該怎麼完成呢？讓我們繼續看下去。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201502/20150209_1_01.gif</url>
        <title>有趣的 CSS 彈跳動畫</title>
        <link>http://www.oxxostudio.tw/articles/201502/css-bounce.html</link>
      </image>
    </item>
    <item>
      <title>CSS 垂直置中的七個方法</title>
      <link>http://www.oxxostudio.tw/articles/201502/css-vertical-align-7methods.html</link>
      <pubDate>2015-02-01 23:55:00 GMT</pubDate>
      <description>之前我有寫過一篇文章：「CSS 垂直置中的三個方法」，這篇將延續該篇文章，繼續介紹另外四種垂直置中的方法，總共七種 CSS 垂直置中的方法分別是：設定行高、添加偽元素、calc 動態計算、使用表格或假裝表格、transform、絕對定位、使用 Flexbox。
      </description>
      <image>
        <url>http://www.oxxostudio.tw/img/articles/201502/20150201_1_01b.jpg</url>
        <title>CSS 垂直置中的七個方法</title>
        <link>http://www.oxxostudio.tw/articles/201502/css-vertical-align-7methods.html</link>
      </image>
    </item>
  </channel>
</rss>
